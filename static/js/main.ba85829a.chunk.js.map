{"version":3,"sources":["CityForm.js","MapContainer.js","TopTenTable.js","App.js","serviceWorker.js","index.js"],"names":["CityForm","state","value","handleChange","e","_this","setState","target","handleFormSubmit","preventDefault","props","handleRequestError","console","log","Geocode","fromAddress","then","response","results","geometry","hasOwnProperty","setCityRectangleBounds","bounds","error","setApiKey","enableDebug","_this2","this","react_default","a","createElement","FormGroup","ControlLabel","FormControl","type","placeholder","onChange","Button","bsStyle","onClick","style","color","errorMessage","Component","MapContainer","_Component","_getPrototypeOf2","Object","classCallCheck","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","activeMarker","selectedPlace","name","onMarkerClick","marker","topTen","setHighlightedRow","showingInfoWindow","onMapClicked","inherits","createClass","key","points","earthquakeLocations","forEach","location","push","lat","lng","google","maps","LatLngBounds","i","extend","dist","zoom","map","index","title","datetime","depth","magnitude","position","visible","GoogleApiWrapper","apiKey","TopTenTable","Table","earthquakes","slice","quake","backgroundColor","highlight","App","topTenEarthquakes","message","toConsumableArray","objectSpread","inputCityRectangleBounds","fetchEarthquakesInfo","fetch","northeast","southwest","json","data","fetchTopTen","now","Date","day","getDate","month","getMonth","year","getFullYear","today","sortedList","filter","parse","className","PageHeader","Row","Col","md","mdOffset","Panel","Heading","Body","src_CityForm","minHeight","src_MapContainer","src_TopTenTable","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ba85829a.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {FormGroup, ControlLabel, FormControl, Button} from 'react-bootstrap';\r\nimport Geocode from 'react-geocode';\r\n\r\nclass CityForm extends Component {\r\n    state = {\r\n        value: \"\"\r\n    }\r\n\r\n    componentDidMount(){\r\n        Geocode.setApiKey('AIzaSyCCbmBMSu-C4M53eYTG7b-bXCaEPzQhMqQ');\r\n        Geocode.enableDebug();\r\n    }\r\n\r\n    handleChange = e => {\r\n        this.setState({ value: e.target.value });\r\n    }\r\n    handleFormSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.handleRequestError(\"\");\r\n        console.log(\"Form Submitted\", this.state.value);\r\n        Geocode.fromAddress(this.state.value).then(\r\n            response => {\r\n                console.log(response);\r\n                if (response.results[0].geometry.hasOwnProperty('bounds')){\r\n                    this.props.setCityRectangleBounds(response.results[0].geometry.bounds)\r\n                } else {\r\n                    this.props.handleRequestError(\"City named not valid, please verify the data entered (input example: Los Angeles, Tokyo)\");\r\n                }\r\n            },\r\n            error => {\r\n                console.error(error);\r\n            }\r\n        )\r\n\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <form>\r\n                <FormGroup>\r\n                    <ControlLabel>Enter a city name: </ControlLabel>\r\n                    <FormControl\r\n                        type=\"text\"\r\n                        value={this.state.value}\r\n                        placeholder=\"City Name\"\r\n                        onChange={this.handleChange}\r\n                    />\r\n                </FormGroup>\r\n                <Button bsStyle=\"info\" type=\"submit\" onClick={(e) => this.handleFormSubmit(e)}>Submit</Button>\r\n                <h4 style={{color: \"red\"}}>{this.props.errorMessage}</h4>\r\n            </form>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default CityForm;","import React, { Component } from 'react'\r\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from 'google-maps-react';\r\n\r\nexport class MapContainer extends Component {\r\n\r\n    state = {\r\n        activeMarker: null,\r\n        selectedPlace: {name: \"\"}\r\n    }\r\n\r\n    onMarkerClick = (props, marker, e) => {\r\n        if (this.props.topTen){\r\n            this.props.setHighlightedRow(props);\r\n        }\r\n        this.setState({\r\n            selectedPlace: props,\r\n            activeMarker: marker,\r\n            showingInfoWindow: true\r\n          });\r\n    }\r\n\r\n    onMapClicked = (props) => {\r\n        if (this.state.showingInfoWindow) {\r\n          this.setState({\r\n            showingInfoWindow: false,\r\n            activeMarker: null\r\n          })\r\n        }\r\n      };\r\n\r\n    render() {\r\n        let points = [];\r\n        this.props.earthquakeLocations.forEach(location => {\r\n            points.push({lat: location.lat, lng: location.lng})\r\n        });\r\n        console.log(points);\r\n        var bounds = new this.props.google.maps.LatLngBounds();\r\n\r\n        for (var i = 0; i < points.length; i++) {\r\n            bounds.extend(points[i]);\r\n          }\r\n\r\n        return (\r\n            <Map google={this.props.google} onClick={this.onMapClicked} bounds={bounds} zoom={4} >\r\n                {this.props.earthquakeLocations.map((location, index) => <Marker key={index}\r\n                                                                                index={index}\r\n                                                                                onClick={this.onMarkerClick}\r\n                                                                                title=\"Earthquake\"\r\n                                                                                name={location.datetime}\r\n                                                                                depth={location.depth}\r\n                                                                                magnitude={location.magnitude}\r\n                                                                                position={{ lat: location.lat, lng: location.lng }} />\r\n                )}\r\n\r\n                <InfoWindow marker={this.state.activeMarker}\r\n                    visible={this.state.showingInfoWindow}>\r\n                    <div>\r\n                        <h4>Earthquake Registred</h4>\r\n                        <h5>{`Datetime: ${this.state.selectedPlace.name}`}</h5>\r\n                        <h5>{`Depth: ${this.state.selectedPlace.depth}`}</h5>\r\n                        <h5>{`Magnitude: ${this.state.selectedPlace.magnitude}`}</h5>\r\n                    </div>\r\n                </InfoWindow>\r\n            </Map>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n    apiKey: ('AIzaSyCCbmBMSu-C4M53eYTG7b-bXCaEPzQhMqQ')\r\n})(MapContainer)","import React, {Component} from 'react';\r\nimport {Table} from 'react-bootstrap';\r\n\r\nclass TopTenTable extends Component {\r\n\r\n    render(){\r\n        return(\r\n            <Table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Date and Time of the Earthquake</th>\r\n                        <th>Magnitude</th>\r\n\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {this.props.earthquakes.slice(0,10).map((quake, index) => (\r\n                        <tr key={index} style={{backgroundColor: quake.highlight ? \"lightgreen\": \"\"}}>\r\n                            <td>{quake.datetime}</td>\r\n                            <td>{quake.magnitude}</td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </Table>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default TopTenTable;","import React, { Component } from 'react';\nimport {PageHeader, Col, Panel, Row} from 'react-bootstrap'; \nimport CityForm from './CityForm';\nimport MapContainer from './MapContainer';\nimport TopTenTable from './TopTenTable';\n\nclass App extends Component {\n  state = {\n    earthquakeLocations: [],\n    topTenEarthquakes: [],\n    errorMessage: \"\"\n  }\n\n  componentDidMount(){\n    this.fetchTopTen();\n  }\n\n  handleRequestError = (message) => {\n    this.setState({errorMessage: message})\n  }\n\n  setHighlightedRow = (marker) => {\n    console.log(marker);\n    let topTenEarthquakes = [...this.state.topTenEarthquakes];\n    topTenEarthquakes.forEach(quake => {quake.highlight = false});\n    let quake = {...topTenEarthquakes[marker.index]};\n    quake.highlight = true;\n    topTenEarthquakes[marker.index] = quake;\n    this.setState({topTenEarthquakes});\n  }\n\n  setCityRectangleBounds = (bounds) => {\n    this.setState({inputCityRectangleBounds: bounds});\n    this.fetchEarthquakesInfo();\n  }\n  \n  fetchEarthquakesInfo = () => {\n    fetch(`http://api.geonames.org/earthquakesJSON?` + \n    `north=${this.state.inputCityRectangleBounds.northeast.lat}` + \n    `&south=${this.state.inputCityRectangleBounds.southwest.lat}` +\n    `&east=${this.state.inputCityRectangleBounds.northeast.lng}` +\n    `&west=${this.state.inputCityRectangleBounds.southwest.lng}` +\n    `&username=jsmg`)\n    .then(response => {\n      return response.json();\n    })\n    .then(data => {\n      console.log(data);\n      if (data.earthquakes.length > 0){\n        this.setState({earthquakeLocations: data.earthquakes});\n      } else {\n        this.handleRequestError(\"No data of earthquakes found in the input city\")\n      }\n    })\n  }\n\n  fetchTopTen = () => {\n    //get last year value\n    let now = new Date();\n    let day = now.getDate();\n    let month = now.getMonth() + 1;\n    let year = now.getFullYear() - 1;\n    let today = `${year}-${month}-${day}`\n    \n    //Use max value in lat and lng in order to return the whole globe, also use max results permitted by Geonames\n    fetch(`http://api.geonames.org/earthquakesJSON?north=90&south=-90&east=180&west=-180&maxRows=500&minMagnitude=2&datetime=${today}&username=jsmg`)\n    .then(response => {\n      return response.json();\n    })\n    .then(data => {\n      console.log(data);\n      //Sort only the earthquakes within last year\n      let sortedList = data.earthquakes.filter(quake => {\n        if ((Date.parse(quake.datetime)) > Date.parse(today)){\n          quake.highlight = false;\n          return quake;\n        } else {\n          return false;\n        }\n      });\n      console.log(sortedList);\n      this.setState({topTenEarthquakes: sortedList});\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <PageHeader className=\"text-center\"> ANM Assignment  <small>Created with React by Juan Manrique</small></PageHeader>\n        <Row>\n        <Col md={3} mdOffset={1}>\n          <Panel>\n            <Panel.Heading>\n              <h2>How it works?</h2>\n            </Panel.Heading>\n            <Panel.Body>\n              <ol>\n                <li>In the first section you must enter a valid city name in order to display in the map the earthquakes registred in the city; click on the marker to get information regarding the quake. *Note: If given a not valid city addres or a city with no earthquake data, a message should prompt</li>\n                <li>In Section two you are able to see the top ten earthquakes registred within the last year; click on the marker to highlight it in the table.</li>\n              </ol>\n            </Panel.Body>\n\n          </Panel>\n        </Col>\n        <Col md={3} mdOffset={0}>\n          <CityForm setCityRectangleBounds={this.setCityRectangleBounds} handleRequestError={this.handleRequestError} errorMessage={this.state.errorMessage}/>\n        </Col>\n        <Col md={4} style={{minHeight: '350px'}}>\n          <MapContainer earthquakeLocations={this.state.earthquakeLocations}/>\n        </Col>\n        </Row>\n        <br/><br/>\n        <Row>\n          <Panel>\n                \n              <Panel.Heading>\n                <h2>Top Ten Earthquakes A Year From Now</h2>\n              </Panel.Heading>\n              <Panel.Body>\n              <Col md={6} mdOffset={0} style={{}}>\n                <TopTenTable earthquakes={this.state.topTenEarthquakes}/>\n              </Col>\n              <Col md={4} style={{minHeight: '350px'}}>\n                <MapContainer earthquakeLocations={this.state.topTenEarthquakes.slice(0,10)} topTen setHighlightedRow={this.setHighlightedRow}/>\n                </Col> \n              </Panel.Body>\n          </Panel>\n           \n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}